=begin
#Core API

#Core API for KIQR Headless CMS

The version of the OpenAPI document: 0.9.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'cgi'

module Kiqr::CoreApi
  class SchemasApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a schema
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project_id 
    # @option opts [CreateSchemaRequest] :create_schema_request 
    # @return [Schema]
    def create_schema(opts = {})
      data, _status_code, _headers = create_schema_with_http_info(opts)
      data
    end

    # Create a schema
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project_id 
    # @option opts [CreateSchemaRequest] :create_schema_request 
    # @return [Array<(Schema, Integer, Hash)>] Schema data, response status code and response headers
    def create_schema_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SchemasApi.create_schema ...'
      end
      # resource path
      local_var_path = '/schemas'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_schema_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Schema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"SchemasApi.create_schema",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SchemasApi#create_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve details about schema
    # @param schema_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project_id 
    # @return [Schema]
    def get_schema(schema_id, opts = {})
      data, _status_code, _headers = get_schema_with_http_info(schema_id, opts)
      data
    end

    # Retrieve details about schema
    # @param schema_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project_id 
    # @return [Array<(Schema, Integer, Hash)>] Schema data, response status code and response headers
    def get_schema_with_http_info(schema_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SchemasApi.get_schema ...'
      end
      # verify the required parameter 'schema_id' is set
      if @api_client.config.client_side_validation && schema_id.nil?
        fail ArgumentError, "Missing the required parameter 'schema_id' when calling SchemasApi.get_schema"
      end
      # resource path
      local_var_path = '/schemas/{schemaId}'.sub('{' + 'schemaId' + '}', CGI.escape(schema_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Schema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"SchemasApi.get_schema",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SchemasApi#get_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a projects history of schemas
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project_id 
    # @return [Array<Schema>]
    def get_schemas(opts = {})
      data, _status_code, _headers = get_schemas_with_http_info(opts)
      data
    end

    # Retrieve a projects history of schemas
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project_id 
    # @return [Array<(Array<Schema>, Integer, Hash)>] Array<Schema> data, response status code and response headers
    def get_schemas_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SchemasApi.get_schemas ...'
      end
      # resource path
      local_var_path = '/schemas'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Schema>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"SchemasApi.get_schemas",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SchemasApi#get_schemas\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
